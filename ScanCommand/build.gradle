/*
 * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os;

plugins {
    id 'java'
    // For running the main class of the ballerina tool tester package
    id 'application'
    // For using the ballerina java project API
    id 'java-library'
    // For checkstyle configurations
    id 'checkstyle'
    // For spotbugs configurations
    id "com.github.spotbugs" version "5.0.14"
    // For providing file download tasks functionality
    id "de.undercouch.download" version "5.4.0"
}

group = 'io.ballerina.scan'
version = '1.0'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }

    // For Ballerina Plugins
    maven {
        url = 'https://maven.pkg.github.com/ballerina-platform/*'
        credentials {
            username System.getenv("packageUser")
            password System.getenv("packagePAT")
        }
    }
}

dependencies {
    // Required dependency for developing ballerina cli applications
    implementation group: 'info.picocli', name: 'picocli', version: '4.7.5'

    // set the correct gson version
    implementation "com.google.code.gson:gson:${project.gsonVersion}"

    // Required dependencies for accessing the ballerina java project API
    // The version should match the version you have in the local machine
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'jballerina-tools', version: "${project.ballerinaVersion}"
    // Required dependencies for building a ballerina cli application
    implementation group: 'org.ballerinalang', name: 'ballerina-cli', version: "${project.ballerinaVersion}"
    // Required Module to convert the AST to a JSON File
    implementation group: 'org.ballerinalang', name: 'diagram-util', version: "${project.ballerinaVersion}"
    // Required for working with toml documents
    implementation group: 'org.ballerinalang', name: 'toml-parser', version: "${project.ballerinaVersion}"

    // Required for determining the platform a java process is running on
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    // Required for applying checkstyle & Spotbugs to the project
    checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: '10.12.1'

    // For extracting remote JAR files and other file operations
    implementation group: 'commons-io', name: 'commons-io', version: '2.15.1'

    // Required dependencies for testing the plugin before building and deploying
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.8.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2'

    // For including the scan report JAR
    implementation files("${projectDir}/src/main/resources/report.zip")
}

// Setting up the ballerina home property for the project
tasks.withType(JavaExec).configureEach {
    // From the local ballerina distribution
    // Following code is the same as:
    // systemProperty 'ballerina.home', System.getProperty('C:\\Program Files\\Ballerina\\distributions\\ballerina-2201.8.2\\bin')
    systemProperty 'ballerina.home', System.getenv("BALLERINA_HOME")
}

// =====================
// Setting up checkstyle
// =====================
// Downloading checkstyle configurations of WSO2
task downloadCheckstyleRuleFiles(type: Download) {
    src([
            'https://raw.githubusercontent.com/wso2/code-quality-tools/v1.4/checkstyle/jdk-17/checkstyle.xml',
            'https://raw.githubusercontent.com/wso2/code-quality-tools/v1.4/checkstyle/jdk-17/suppressions.xml'
    ])
    overwrite false
    onlyIfNewer true
    dest buildDir
}

// Location for placing the wso2 checkstyle configuration
artifacts.add('default', file("${project.buildDir}/checkstyle.xml")) {
    builtBy(downloadCheckstyleRuleFiles)
}

// Location for placing the suppression files configurations
artifacts.add('default', file("${project.buildDir}/suppressions.xml")) {
    builtBy(downloadCheckstyleRuleFiles)
}

// Files to be excluded from checkstyle \
def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle) {
    exclude excludePattern
}

// Checkstyle outputs locations
checkstyle {
    toolVersion "10.12.1"
    // As in the current implementation the project is as a sub module
    configFile rootProject.file("${project.buildDir}/checkstyle.xml")
    configProperties = ["suppressionFile": file("${project.buildDir}/suppressions.xml")]
}

// Run checkstyle only after downloading the custom checkstyle configurations
checkstyleMain.dependsOn(downloadCheckstyleRuleFiles)
checkstyleTest.dependsOn(downloadCheckstyleRuleFiles)

// ===================
// Setting up spotbugs
// ===================
spotbugsMain {
    effort "max"
    reportLevel "low"

    // Spotbugs report destination
    reportsDir = file("$project.buildDir/reports/spotbugs")

    // Spotbugs report types to generate
    reports {
        html.enabled true
        text.enabled = true
    }

    // spotbugs exclusions file destination
    def excludeFile = file("${projectDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

// Have spotbugs test enabled
spotbugsTest {
    effort = "max"
    reportLevel = "low"

    // Spotbugs report destination
    reportsDir = file("$project.buildDir/reports/spotbugs")

    // Spotbugs report types to generate
    reports {
        html.enabled true
        text.enabled = true
    }

    // spotbugs exclusions file destination
    def excludeFile = file("${projectDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

task validateSpotbugs() {
    doLast {
        if (spotbugsMain.reports.size() > 0 &&
                spotbugsMain.reports[0].destination.exists() &&
                spotbugsMain.reports[0].destination.text.readLines().size() > 0) {
            spotbugsMain.reports[0].destination?.eachLine {
                println 'Failure: ' + it
            }
        } else {
            throw new GradleException("Spotbugs rule violations were found.");
        }
    }
}

spotbugsMain.finalizedBy validateSpotbugs

// Required to run tests relevant to the plugin
tasks.test {
    useJUnitPlatform()
}

// class to build when gradlew run is executed in there terminal
application {
    mainClass = 'io.ballerina.scan.Main'
}

// Configurations to automatically build and deploy scan tool
def packageName = "tool_scan"
def tomlVersion = "${project.toolVersion}"
def ballerinaTomlFilePlaceHolder = new File("${projectDir}/tool-scan/Ballerina.toml")
def balToolTomlFilePlaceHolder = new File("${projectDir}/tool-scan/BalTool.toml")
def ballerinaTomlFile = new File("${projectDir}/tool-scan/Ballerina.toml")
def balToolTomlFile = new File("${projectDir}/tool-scan/BalTool.toml")
def balerinaCentralDir = System.getProperty("user.home") + "/.ballerina/repositories/central.ballerina.io/bala/ballerina"
def ballerinaLocalDir = System.getProperty("user.home") + "/.ballerina/repositories/local/bala/ballerina"
def balCentralCacheDir = project.file(System.getProperty("user.home") + "/.ballerina/repositories/central.ballerina.io")
def ballerinaToolConfigToml = System.getProperty("user.home") + "/.ballerina/.config/bal-tools.toml"

task updateTomlFiles {
    // Update the Ballerina.toml and Dependencies.toml files
    doLast {
        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@project.toolVersion@", project.toolVersion)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        ballerinaTomlFile.text = newConfig

        def newToolConfig = balToolTomlFilePlaceHolder.text.replace("@project.toolVersion@", project.toolVersion)
        newToolConfig = newToolConfig.replace("@toml.version@", tomlVersion)
        balToolTomlFile.text = newToolConfig
    }
}

task createBallerinaToolConfigFile {
    // Create the bal-tools.toml file in the .ballerina/.config directory
    def configFileContent = """
        [[tool]]
        id = "scan"
        org = "ballerina"
        name = "tool_scan"
        version = "${project.toolVersion}"
        active = true
    """.stripIndent()

    outputs.upToDateWhen { false }
    doLast {
        if (!file(ballerinaToolConfigToml).exists()) {
            file(ballerinaToolConfigToml).mkdir()
        }

        // Get existing tool list from the bal-tools.toml file
        TomlDocument

        file(ballerinaToolConfigToml).write(configFileContent)
        println("Successfully created the bal-tools.toml file in the .ballerina/.config directory")
    }
}

task buildScanTool {
    doLast {
        // Pack and push to local repo of distribution
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', 'cd tool-scan & bal pack & bal push --repository=local'
            } else {
                commandLine 'sh', '-c', 'cd tool-scan ; bal pack ; bal push --repository=local'
            }
        }
        println("Successfully build and pushed the scan tool to the local repository")

        // Remove the cache directories in the central repository
        delete {
            fileTree(balCentralCacheDir).matching {
                include 'cache-*'
            }
        }
        println("Successfully cleaned the .ballerina/cache* directories")

        // Update the central repository
        def balDestinationDir = "$balerinaCentralDir/$packageName"
        def balSourceDir = "$ballerinaLocalDir/$packageName"
        if (file(balDestinationDir).exists()) {
            file(balDestinationDir).deleteDir()
        }
        copy {
            from balSourceDir
            into balDestinationDir
        }
        println("Successfully copied package from local/bala the central.ballerina.io/bala directory")
    }
}

buildScanTool.dependsOn createBallerinaToolConfigFile

build {
    dependsOn updateTomlFiles
    dependsOn createBallerinaToolConfigFile
    dependsOn buildScanTool
}

//task callJavaFunction(type: JavaExec) {
//    classpath = sourceSets.main.runtimeClasspath
//    main = 'MyClass'
//    args 'myFunction'
//}