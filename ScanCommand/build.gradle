plugins {
    id 'java'
    // For running the main class of the ballerina tool tester package
    id 'application'
    // For using the ballerina java project API
    id 'java-library'
    // For creating a fat jar
    id "com.github.johnrengelman.shadow" version "7.1.0"
    // For checkstyle configurations
    id 'checkstyle'
    // For spotbugs configurations
    id "com.github.spotbugs" version "5.0.14"
    // For providing file download tasks functionality
    id "de.undercouch.download" version "5.4.0"
}

group = 'org.wso2.ballerina'
version = '1.0'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }

    // For Ballerina Plugins
    maven {
        url = 'https://maven.pkg.github.com/ballerina-platform/*'
        credentials {
            username System.getenv("packageUser")
            password System.getenv("packagePAT")
        }
    }
}

dependencies {
    // Required dependency for developing ballerina cli applications
    implementation group: 'info.picocli', name: 'picocli', version: '4.7.5'

    // set the correct gson version
    implementation "com.google.code.gson:gson:${project.gsonVersion}"

    // Required dependencies for accessing the ballerina java project API
    // The version should match the version you have in the local machine
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'jballerina-tools', version: "${project.ballerinaVersion}"
    // Required dependencies for building a ballerina cli application
    implementation group: 'org.ballerinalang', name: 'ballerina-cli', version: "${project.ballerinaVersion}"
    // Required Module to convert the AST to a JSON File
    implementation group: 'org.ballerinalang', name: 'diagram-util', version: "${project.ballerinaVersion}"

    // Required for determining the platform a java process is running on
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    // Required for creating a sonar scanner from ballerina side (To be removed)
    implementation group: 'org.sonarsource.scanner.api', name: 'sonar-scanner-api', version: '2.16.3.1081'

    // Required for applying checkstyle & Spotbugs to the project
    checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: '10.12.1'
}

// Setting up the ballerina home property for the project
tasks.withType(JavaExec).configureEach {
    // From the local ballerina distribution
    // Following code is the same as:
    // systemProperty 'ballerina.home', System.getProperty('C:/Program Files/Ballerina/distributions/ballerina-2201.8.2')
    systemProperty 'ballerina.home', System.getenv("BALLERINA_HOME")
}

// =====================
// Setting up checkstyle
// =====================
// Downloading checkstyle configurations of WSO2
task downloadCheckstyleRuleFiles(type: Download) {
    src([
            'https://raw.githubusercontent.com/wso2/code-quality-tools/v1.4/checkstyle/jdk-17/checkstyle.xml',
            'https://raw.githubusercontent.com/wso2/code-quality-tools/v1.4/checkstyle/jdk-17/suppressions.xml'
    ])
    overwrite false
    onlyIfNewer true
    dest buildDir
}

// Location for placing the wso2 checkstyle configuration
artifacts.add('default', file("$project.buildDir/checkstyle.xml")) {
    builtBy('downloadCheckstyleRuleFiles')
}

// Location for placing the suppression files configurations
artifacts.add('default', file("$project.buildDir/suppressions.xml")) {
    builtBy('downloadCheckstyleRuleFiles')
}

// Files to be excluded from checkstyle \
def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle) {
    exclude excludePattern
}

// Checkstyle outputs locations
checkstyle {
    toolVersion "10.12.1"
    // As in the current implementation the project is as a sub module
    configFile rootProject.file("ScanCommand/build/checkstyle.xml")
    configProperties = ["suppressionFile": file("${rootDir}/ScanCommand/build/suppressions.xml")]
}

// Run checkstyle only after downloading the custom checkstyle configurations
checkstyleMain.dependsOn(":ScanCommand:downloadCheckstyleRuleFiles")

// ===================
// Setting up spotbugs
// ===================
spotbugsMain {
    effort "max"
    reportLevel "low"

    // Spotbugs report destination
    reportsDir = file("$project.buildDir/reports/spotbugs")

    // Spotbugs report types to generate
    reports {
        html.enabled true
        text.enabled = true
    }

    // spotbugs exclusions file destination
    def excludeFile = file("${rootDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

// Disable spotbugs for test files
spotbugsTest {
    enabled = false
}

task validateSpotbugs() {
    doLast {
        if (spotbugsMain.reports.size() > 0 &&
                spotbugsMain.reports[0].destination.exists() &&
                spotbugsMain.reports[0].destination.text.readLines().size() > 0) {
            spotbugsMain.reports[0].destination?.eachLine {
                println 'Failure: ' + it
            }
            throw new GradleException("Spotbugs rule violations were found.");
        }
    }
}

spotbugsMain.finalizedBy validateSpotbugs

// class to build when gradlew run is executed in there terminal
application {
    mainClass = 'testing.balToolTester.Main'
}

// Required configurations to create a sonar scanner
// Shadow JAR is not required as we will not be creating a sonar scanner CLI and instead depend on the
// users system available sonar scanner
// Creating a fat jar
tasks.shadowJar {
    minimize {}

    // Removing all unwanted files and directories
    // build related files, useless for the plugin
    exclude '**/*.js'
    exclude '**/*.properties'
    exclude '**/*.proto'
    exclude '**/*.txt'

    // Removing unwanted directories and subdirectories in them
    // Currently removing all files and folders and including only needed ones do not work for ShadowJAR
    exclude "balToolTester/**"
    exclude "cli-help/**"
    exclude "com/**"
    exclude "create_cmd_templates/**"
    exclude "doc-ui/**"
    exclude "io/**"
    exclude "javax/**"
    exclude "kotlin/**"
    exclude "licenses/**"
    exclude "me/**"
    exclude "new_cmd_defaults/**"
    exclude "okhttp3/**"
    exclude "okio/**"
    exclude "picocli/**"
    exclude "about.html"
    exclude "bal-tools-toml-schema.json"
    exclude "ballerina-toml-schema.json"
    exclude "dependencies-toml-schema.json"
    exclude "jballerina-tools-2201.8.2.zip"
    exclude "old-dependencies-toml-schema.json"
    exclude "plugin.xml"
    exclude "production.html"
    exclude "release-description.md"
    exclude "settings-toml-schema.json"
    exclude "syntax_tree_descriptor.json"
    exclude "template.declaration.mustache"
    exclude "template.execution.mustache"
    exclude "testng.css"
    exclude "testng-1.0.dtd"
    exclude "testngtasks"
    exclude "org/apache/**"
    exclude "org/slf4j/**"
    exclude "org/sonatype/**"
    exclude "org/ballerinalang/**"
    exclude "org/codehaus/**"
    exclude "org/eclipse/**"
    exclude "org/jacoco/**"
    exclude "org/jetbrains/**"
    exclude "org/jline/**"
    exclude "org/objectweb/**"
    exclude "org/sl4j/**"
    exclude "org/testng/**"
    exclude "org/wso2/ballerinalang/**"

    // The following command creates the FAT jar
    doLast {
        shadowJar.archiveFile.get().asFile
    }
}

artifacts {
    archives shadowJar
}